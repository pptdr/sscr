import os, csv, subprocess
from typing import Dict, Any
from datetime import datetime
import time

import pandas as pd
from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.contrib.auth.models import User, auth
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt
from .models import Client_details, videos_at, Client
from django.core.files.storage import FileSystemStorage

def trail(request):
    cmd = 's3cmd ls'
    res = os.popen(cmd)
    res1 = res.read()

    return 


def trail(request):

    cmd = 's3cmd ls s3://ecube-eis'
#    cmd = 'aws s3 ls s3://ecube-eis/sdpmedia/'
#    cmd1 = cmd + ' > city.txt'
    # print(cmd1)
    res = os.popen(cmd).read()
#    try:
#        res = subprocess.check_output([cmd],shell=True).decode()
#        print('in try block:',res)
#        res1 = res.read()
#    except subprocess.CalledProcessError as exec:
#        res1 = 'error'
#         res = exec.output
#         print('in except block:',res)

#    df = pd.read_csv("city.txt", delimiter=',')
#    df.to_csv('city1.csv')
#    f = open("city1.csv", "r")
#    reader1 = csv.reader(f)
#    reader = list(reader1)
    # print("reader: ", reader)
#    num_rows = len(reader) - 1
#    city_names = []
#    for line in range(num_rows):
        # print('col:', row[1])
#        row = reader[line]
#        val = 'PRE' in row[1]
#        t3 = ''
#        if val:
#            t3 = row[1].replace('PRE', ' ')

#        t4 = t3.strip()
#        backslash = '/'
#        val = backslash in t4
#        t3 = ''
#        if val:
#            t3 = t4.replace(backslash, ' ')

#        t4 = t3.strip()
#        city_names.append(t4)

#    print("city names: ",city_names)

    return render(request, 'trail.html', {'city_names':res})


def about(request):
    return render(request, 'about.html')

def layout(request):
    return render(request, 'layout.html')

def home(request):
    if request.user.is_superuser:
        return render(request, 'adminpage.html')
    else:
        return render(request,'userpage.html')

def logout(request):
    auth.logout(request)
    return redirect('/')

@csrf_exempt
def login(request):
    if request.method == 'POST':
        unm = request.POST['username']
        password = request.POST['password']

        user = auth.authenticate(username=unm, password=password)

        if user is not None:
            auth.login(request, user)
            list1 = []
            if request.user.is_superuser:
                return render(request, 'adminpage.html')
            else:
                return render(request, 'userpage.html')
        else:
            messages.info(request, "Invalid credentials")
            return redirect('layout')
    else:
        return render(request, 'login.html')

def adminpage(request):
    return render(request, 'adminpage.html')

def userpage(request):
    return render(request, 'userpage.html')


def get_companyname(current_user):
    company_name = ''
    clidetails = Client.objects.all()

    for client in clidetails:
        client_user = str(client.user)

        if current_user == client_user:
           # print('current_user company name: ', client.company_name)
            company_name = client.company_name

    return company_name

def get_city_and_location(current_user):
    values = {}
    values1 = []
    company_name = get_companyname(current_user)
    #print('return value: ',company_name)
    values["company_name"] = company_name

    cmd = 'aws s3 ls s3://ecube-eis/' + str(company_name) + '/'
    cmd1 = cmd + ' > city.txt'
    #print(cmd1)
    res = os.popen(cmd1)
    res1 = res.read()

    df = pd.read_csv("city.txt", delimiter=',')
    df.to_csv('city1.csv')
    f = open("city1.csv", "r")
    reader1 = csv.reader(f)
    reader = list(reader1)
    #print("reader: ", reader)
    num_rows = len(reader) -1
    city_names = []
    for line in range(num_rows):
        #print('col:', row[1])
        row = reader[line]
        val = 'PRE' in row[1]
        t3 = ''
        if val:
            t3 = row[1].replace('PRE', ' ')

        t4 = t3.strip()
        backslash = '/'
        val = backslash in t4
        t3 = ''
        if val:
            t3 = t4.replace(backslash, ' ')

        t4 = t3.strip()
        city_names.append(t4)

    values["city_names"]=city_names
    #print('value',values)

    return values

def time_conversion(temp_date,temp_time):
    totalSecs = 0
    gmt_format = '5:30:00'
    timeList = []
    timeList.append(temp_time)
    timeList.append(gmt_format)
    for tm in timeList:
        timeParts = [int(s) for s in tm.split(':')]
        totalSecs += (timeParts[0] * 60 + timeParts[1]) * 60 + timeParts[2]
    totalSecs, sec = divmod(totalSecs, 60)
    hr, min = divmod(totalSecs, 60)
    final_date = temp_date
    temp_hr = hr

    strzero = '0'
    if hr > 24:
        hr = temp_hr - 24
        dateparts = [int(s) for s in temp_date.split('-')]
        new_date = dateparts[2] + 1

        if dateparts[1] < 10:
            month = strzero + str(dateparts[1])
        else:
            month = str(dateparts[1])

        final_date = str(dateparts[0])+"-"+month+"-"+str(new_date)

    print(final_date)
    #print("%d:%02d:%02d" % (hr, min, sec))
    str_time = str(hr)+":"+str(min)+":"+str(sec)
    return str_time,final_date

def get_videos(res1, cnm , location):
    #print('res1 display all content:', res1)
    #print('cnm and location: ',cnm,location)

    num_rows = len(res1) - 1
    a = [[0] * 5 for i in range(num_rows)]
    # a[0][0], a[0][1], a[0][2], a[0][3] = "Date", "Time", "Size in KB", "Video"
    for j in range(num_rows):
        a[j][0] = j + 1
        a[j][1], a[j][2], a[j][3], a[j][4] = res1[j + 1].split()
        temp = a[j][4]
        t1 = cnm + '/' + location + '/'
        val = t1 in temp
        t = ''
        tt,dt = time_conversion(a[j][1],a[j][2])
        print(tt)
        a[j][1] = dt
        a[j][2] = tt
        if val:
            t = temp.replace(t1, ' ')
        a[j][4] = t
    return a

def get_clientlist():
    clients_list = []
    clidetails = Client.objects.all()
    count = 0
    temp = []
    for c in clidetails:
        count = count + 1
        temp.append(c.company_name)

    num_rows = count
    #print('num_rows: ', num_rows)
    clients_list = [[0] * 2 for i in range(num_rows)]
    # a[0][0], a[0][1], a[0][2], a[0][3] = "Date", "Time", "Size in KB", "Video"
    for j in range(num_rows):
        clients_list[j][0] = j + 1
        clients_list[j][1] = str(temp[j])

    return clients_list

def get_signals():
    clidetails = Client.objects.all()
    city_list= {}
    city_names = []
    i = 0
    sr = []
    for client in clidetails:
        client_user = str(client.user)
        company_name = get_companyname(client_user)
        #city_list.append(company_name)
        city = get_city_and_location(client_user)
        #city_names = city["city_names"]
        city_list.update({city["company_name"]: city["city_names"]})
        #sr =sr.append(i+1)
    print('city_list:',city_list)
    return city_list


def get_all_clients_and_signals():
    clidetails = Client.objects.all()
    full_list = []
    sorted_full_list = []
    for client in clidetails:
        current_user = str(client.user)
        company_name = get_companyname(current_user)
        # print('return value: ',company_name)

        cmd = 'aws s3 ls s3://ecube-eis/' + str(company_name) + '/'
        cmd1 = cmd + ' > city.txt'
        print(cmd1)
        res = os.popen(cmd1)
        res1 = res.read()
     #   print('res1 :', res1)
        df = pd.read_csv("city.txt", delimiter=',')
        df.to_csv('city1.csv')
        f = open("city1.csv", "r")
        reader1 = csv.reader(f)
        reader = list(reader1)
      #  print("reader: ", reader)
        num_rows = len(reader) - 1
        city_names = []
        for line in range(num_rows):
            # print('col:', row[1])
            row = reader[line]
            val = 'PRE' in row[1]
            t3 = ''
            if val:
                t3 = row[1].replace('PRE', ' ')

            t4 = t3.strip()
            backslash = '/'
            val = backslash in t4
            t3 = ''
            if val:
                t3 = t4.replace(backslash, ' ')

            t4 = t3.strip()
            t5 = company_name + '/' + t4
            city_names.append(t5)
            full_list.append(t5)

    full_list.sort()
    #print(full_list)
    return full_list

def show_signals(request):
    city_list = get_signals()
    return render(request, 'show_signals.html',{'city_list':city_list, 'dict_len':len(city_list)})

def addclient(request):

    if request.method == 'POST' and 'create_user' in request.POST:
            cnm = request.POST['company_name']
            clogo = request.POST['company_logo']
            fnm = request.POST['first_name']
            lnm = request.POST['last_name']
            unm = request.POST['username']
            email = request.POST['email']
            password1 = request.POST['password1']
            password2 = request.POST['password2']
            if password1 == password2:
                if User.objects.filter(username=unm).exists():
                    messages.info(request, 'Username is taken')
                    return redirect('addclient')
                elif User.objects.filter(email=email).exists():
                    messages.info(request, 'Email is taken')
                    return redirect('addclient')
                else:
                    user = User.objects.create_user(username=unm, password=password1, email=email, first_name=fnm,
                                                last_name=lnm)

                client1 = Client()
                client1.user = user
                client1.company_name = cnm
                client1.company_logo = clogo
                user.save()
                client1.save()
                messages.info(request, 'New User created')
                clients_list = get_clientlist()

                cmd = ''
                return render(request, 'show_clients.html', {'client_list': clients_list})
            else:
                messages.info(request, 'Password not matching')
                return redirect('addclient')
    #elif request.method =='POST' and 'display_all_user' in request.POST:
    else:
            print("in else part")
            return render(request,'addclient.html')

    return render(request, 'client_menu.html')

def client_menu(request):
    return render(request, 'client_menu.html')

def show_clients(request):
    print('in display user')
    clients_list = get_clientlist()
    return render(request, 'show_clients.html', {'client_list': clients_list})


def deleteclient(request):
    if request.method == 'POST':
        temp = str(request.POST.get('Delete_now'))
        print('client to delete:',temp)
        temp1 = Client.objects.filter(company_name = temp).delete()
        print('client deleted')
        clients_list = get_clientlist()
        return render(request, 'show_clients.html', {'client_list': clients_list})
    return render(request, 'addclient.html')


@csrf_exempt
def uploadvideo(request):
    # Copy local file to bucket
    # aws s3 cp file-name s3://bucket-name
    # E.g aws s3 cp getdata.php s3://tgsbucket
    # Copy local folder to s3
    # E.g aws s3 cp data s3://sbucket/data --recursive  # to upload data folder to s3
    str1 = 'aws s3 cp '

    city_names = []
    if request.user.is_superuser:
        user_or_admin = 'admin'
        full_list = get_all_clients_and_signals()
    else:
        user_or_admin = 'user'
        values = get_city_and_location(request.user.username)
        cnm = values['company_name']
        print('cnm:', cnm)
        city_names = values['city_names']

    #if request.method == 'POST' and request.FILES['fileToUpload']:
    if request.method == 'POST':
        print("\n#### Upload video to given bucket ####\n")
        temp = 's3://ecube-eis/'
        if request.user.is_superuser:
            signal_location = str(request.POST.get('company_name'))
            print(signal_location)
            temp1 = temp + signal_location + '/'
            cnm, location = signal_location.split('/')
        else:
            location = str(request.POST.get('signal'))
            print(location)
            temp1 = temp + cnm + '/' + location + '/'

        print('temp: ', temp1)

        myfile = request.FILES['fileToUpload']
        fs = FileSystemStorage()
        filename = fs.save(myfile.name, myfile)
        print(myfile.name)
        print('filesystem: ',filename)
        uploaded_file_url = fs.url(filename)
        path = os.getcwd()
        print(uploaded_file_url)
        source = str(myfile)
        cmd = str1 + path + uploaded_file_url + ' ' + temp1 + myfile.name
        print(cmd)
        res = os.popen(cmd)
        res1 = res.read()

        cmd1 = 'aws s3 ls '
        list_bucket = cmd1 + temp1 + ' ' + '--recursive'
        print(list_bucket)
        res = os.popen(list_bucket)
        res1 = list(res)
        a = get_videos(res1,cnm , location)

        return render(request, 'listout_videos.html', {'show_table': a, 'cnm': cnm, 'city': location})
    else:
        print("in else")
        if user_or_admin == 'admin':
            return render(request, 'uploadvideo.html', {'full_list': full_list})
        else:
            return render(request, 'uploadvideo.html', {'company_name': cnm, 'city_names': city_names})

        return render(request, 'uploadvideo.html', {'full_list': full_list})

    return render(request,'home.html')




def deletevideo(request):
    str1 = 'aws s3 rm s3://ecube-eis/'
#    print("In delete video function")
    if request.method == 'POST':
        if request.user.is_superuser:
            print("its admin")
            cnm = str(request.POST.get('cnm'))
            city = str(request.POST.get('city_nm'))
            cnm_and_city = cnm + '/' + city + '/'
        else:
            cnm = str(request.POST.get('cnm'))
            city = str(request.POST.get('city_nm'))
            cnm_and_city = cnm + '/' + city + '/'

        print('video location to delete : ',cnm_and_city)
        video = str(request.POST.get('Delete_now'))
        print('Delete_now ',video)

        delete_video = str1 + cnm_and_city + video
        # delete_video = str1 + ' rb s3://' + name + ' --force'    # To delete bucket
        print(delete_video)
        os.system(delete_video)

        list_bucket = 'aws s3 ls s3://ecube-eis/' + cnm_and_city + ' ' + '--recursive'
        print(list_bucket)
        res = os.popen(list_bucket)
        res1 = list(res)
        a = get_videos(res1,cnm,city)

        return render(request, 'listout_videos.html', {'show_table': a, 'cnm': cnm, 'city': city})
    else :
        return render(request, 'userpage.html')

    return render(request, 'userpage.html')

def displaylist_user(request):
    # List all Objects in a Bucket Recursively
    # aws s3 ls s3://sbucket --recursive

    str1 = 'aws s3 ls s3://ecube-eis/'
    city_names = []
    if request.user.is_superuser:
        print("admin")
    else:
        current_user = request.user.username
        values = get_city_and_location(current_user)
        city_names = values['city_names']

    if request.method == 'POST':
        if request.user.is_superuser:
            print("its admin")
            signal_location = str(request.POST.get('location'))
            #print(location)
            cnm,location = signal_location.split('/')
            print(cnm)
            print(location)
        else:
            print("\n#### List all objects in a bucket recursively ####\n")
            location = str(request.POST.get('location'))
            print('location selected for listout : ',location)
            cnm = values['company_name']
            print('cnm:', cnm)

        cmd = str1 + cnm + '/'
        list_bucket = cmd + location + ' ' + '--recursive'
        print(list_bucket)
        res = os.popen(list_bucket)
        res1 = list(res)
        a = get_videos(res1,cnm,location)
        return render(request, 'listout_videos.html', {'show_table':a, 'cnm':cnm , 'city': location})
    else:
        if request.user.is_superuser:
            return render(request, 'adminpage.html')
        else:
            return render(request, 'displaylist_user.html', {'city_names': city_names})


def displaylist_admin(request):
    full_list = get_all_clients_and_signals()
    print("full list",full_list)
    return render(request, 'displaylist_admin.html',{"full_list": full_list})

