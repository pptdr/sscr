upstream smart_signal_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
  server unix:/home/ubuntu/ecubesolutions.in/venv/smart_signal/run/gunicorn.sock fail_timeout=0;
}

server {

    listen   80;
    listen [::]:80 ipv6only=on default_server;

#    listen   443;
#    listen  [::]:443 default_server;

    server_name ecubesolutions.in www.ecubesolutions.in;
    
    client_max_body_size 4G;
    access_log /home/ubuntu/ecubesolutions.in/venv/smart_signal/logs/nginx-access.log;
    error_log /home/ubuntu/ecubesolutions.in/venv/smart_signal/logs/nginx-error.log;

    location /static/ {
        alias   /home/ubuntu/ecubesolutions.in/venv/smart_signal/static/;
    }

    location /media/ {
        alias   /home/ubuntu/ecubesolutions.in/venv/smart_signal/media/;
    }

    location / {

        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

	# we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        #proxy_set_header X-Forwarded-Proto $scheme;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://smart_signal_server;
            break;
        }
    }

 #   listen [::]:443 ssl ipv6only=on; # managed by Certbot
 #   listen 443 ssl; # managed by Certbot
 #   ssl_certificate /etc/letsencrypt/live/ecubesolutions.in/fullchain.pem; # managed by Certbot
 #   ssl_certificate_key /etc/letsencrypt/live/ecubesolutions.in/privkey.pem; # managed by Certbot
 #   include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
 #   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

#    return 301 https://ecubesolutions.in;
}


#server {
#    listen 80;
#    listen [::]:80 ipv6only=on default_server;

#    server_name ecubesolutions.in www.ecubesolutions.in;

#    return 301 https://ecubesolutions.in$request_uri;
#}

#server {
#    listen 443 ssl http2;
#    server_name ecubesolutions.in www.ecubesolutions.in;

    # . . . other code

#    return 301 https://ecubesolutions.in$request_uri;
#}
